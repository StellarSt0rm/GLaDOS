#!/bin/bash

#-----------------------TRAP AND PREP-----------------------
function cleanup_2 {
	stty echo
	history -r
	if [ "$OP_C" = true ] || [ "OP_SE" = true ]; then
		printf \\33\[\?1047l
		tput rc
	fi
	printf "\n"
	exit
}
stty -echo
trap cleanup_2 SIGINT

#Check If Sudo
if [[ $EUID -ne 0 ]]; then
	sudo="false"
	user=$USER
else
	sudo="true"
	user=$SUDO_USER
fi

if [ -f "/home/$user/.config/glados/settings-p.txt" ]; then
	P=$(cat /home/$user/.config/glados/settings-p.txt)
	PERSONALITY=" and your personality is:($P),"
fi

if [ ! $(whoami) = "overlord" ]; then
	N="\n"
fi

#-----------------------VARIABLES-----------------------
vers="1.7.2"
vers_2="1.6.3"

blue=$(tput setaf 4)
yellow=$(tput setaf 11)
red=$(tput setaf 1)
green=$(tput setaf 2)
normal=$(tput sgr0)
magneta=$(tput setaf 5)

h="\n${blue}Usage: glados \"Explain quantum computing in simple terms\"${yellow}\n\nCommand arguments:${normal}\n'-h'   -   To access this prompt\n'-c'   -   To access GLaDOS chat mode\n'-r'   -   To reset the chat\n'-n'   -   To prevent sending the name on first chat\n'-v'   -   To see the current verion\n'-u'   -   To update GLaDOS\n'-s'   -   To execute a shell command (EXPERIMENTAL!)\n\n${yellow}Chat mode arguments:  (Literally, just type them inside chat mode)${normal}\n'-q'   -   To quit GLaDOS chat mode\n'-h'   -   To access this prompt\n\n${green}More functions coming soon${normal}\n\n${blue}If You Have Any Questions Contact Me Trough:\n${yellow}GitHub${blue}:${normal} 'StellarSt0rm'   ${yellow}Email${blue}:${normal} 'StellarSt0rm+dev@gmail.com'"

#-----------------------FUNCTIONS-----------------------
function reset() {
if [ -f ~/.config/tgpt/config.txt ]; then
	printf "\n${red}Are you sure you want to reset the chat, it will be DELETED!\n\n${normal}Are you sure? [y/N]: "
	stty echo && read C && stty -echo && C=$(echo "$C" | tr '[:upper:]' '[:lower:]')
	if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
		rm -f ~/.config/tgpt/config.txt
		if [ -n "$T" ] && [ -z $OP_C ]; then
			cols=$(tput cols)
			printf "\n${red}RESETTING...\n"
			tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n\n"
		else
			printf "\n${red}RESETTING...\n$N"
		fi
	else
		if [ -n "$T" ] && [ -z $OP_C ]; then
			cols=$(tput cols)
			printf "\n${green}CANCELLED\n"
			tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n\n"
		else
			printf "\n${green}CANCELLED\n$N"
		fi
	fi
elif [ "$OP_R" = true ] && [ ! -f ~/.config/tgpt/config.txt ]; then
	if [ -n "$T" ] && [ -z "$OP_C" ]; then
		printf "\n${red}There's no chat to reset!\n"
		cols=$(tput cols)
		tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n\n"
	else
		printf "\n${red}There's no chat to reset!\n$N"
	fi
fi
printf "${normal}"
}

function ask_bai() {
	tmp=1
}

#-----------------------ARGS CHECKER-----------------------
ARGS=$(getopt -o rcnhvuso --long uninstall,settings -n "$0" -- "$@" 2>/dev/null)
if [ $? -ne 0 ]; then
	printf "\n${red}Command Not Found!\n${blue}Use '-h' to get more help\n"
	stty echo
	exit
fi

eval set -- "$ARGS"
while true; do
	case "$1" in
		-r)
			OP_R=true
			shift;;
		-c)
			OP_C=true
			shift;;
		-n)
			OP_N=true
			shift;;
		-h)
			printf "$h\n$N"
			stty echo
			exit
			shift;;
		-v)
			install_location=$(which glados | sed 's/\/glados//')
			if [ "$install_location" = /usr/local/bin ]; then
				install_type="Global"
			else
				install_type="Local"
			fi
			printf "\n${blue}Current installation type${normal}: ${yellow}$install_type\n\n${blue}GLaDOS version${normal}:${yellow} $vers\n${blue}GLaDOS-GPT version${normal}:${yellow} $vers_2${normal}\n\n${blue}If You Have Any Questions Contact Me Trough:\n${yellow}GitHub${blue}:${normal} 'StellarSt0rm'   ${yellow}Email${blue}:${normal} 'gamerblue208+dev@gmail.com'\n$N"
			stty echo
			exit
			shift;;
		-u)
			OP_U=true
			shift;;
		-s)
			OP_S=true
			shift;;
		-o)
			OP_O=true
			shift;;
		--uninstall)
			OP_UN=true
			shift;;
		--settings)
			OP_SE=true
			shift;;
		--)
			shift;
			break;;
	esac
done

#-----------------------TEXT CHECKS-----------------------
T="$@"
if [ -z "$T" ] && [ -z "$OP_C" ] && [ -z "$OP_H" ] && [ -z "$OP_R" ] && [ -z "$OP_U" ] && [ -z "$OP_S"] && [ -z "$OP_O" ] && [ -z "$OP_SE" ]; then
	printf "\n${red}You have to write some text!\n${blue}Example: glados \"Explain quantum computing in simple terms\"\nUse '-h' to get more help${normal}\n$N"
	stty echo
	exit
elif [ "$OP_S" = true ] && [ -z "$T" ]; then
	printf "\n${red}You have to write some text!\n${blue}Example: glados -s \"How to update system\"\nUse '-h' to get more help${normal}\n$N"
	stty echo
	exit
elif [ "$OP_O" = true ] && [ -z "$T" ]; then
	printf "\n${red}You have to write some text!\n${blue}Example: glados -o \"How to make a https request in php\"\nUse '-h' to get more help${normal}\n$N"
	stty echo
	exit
fi

#-----------------------SETTINGS-----------------------
if [ "$OP_SE" = true ]; then
	function clr() {
  	for ((i=0; i<$1; i++)); do
    	printf "\033[F\033[2K\r"
  	done
	}

	function main() {
  	printf "${blue}Welcome To The Settings Prompt! What Do You Want To Do?\n${yellow}1) Personality\n2) Exit\n" && printf "${normal}Option: " && stty echo && read C && stty -echo
  	if [ "$C" = 1 ]; then
    	clr 4
    	personality
  	elif [ "$C" = 2 ]; then
   		printf \\33\[\?1047l
    	tput rc
    	stty echo
    	exit
  	else
    	printf "${red}Invalid Input! Press Enter To Try Again" && read && printf "\033[2K" && clr 4
    	main
  	fi
	}

	function personality() {
  	printf "${blue}Personality:  What Do You Want To Do?\n${yellow}1) Set Personality\n2) Clear Personality\n3) Back\n" && printf "${normal}Option: " && stty echo && read C && stty -echo
  	if [ "$C" = 1 ]; then
    	clr 5
    	personality_2
  	elif [ "$C" = 2 ]; then
    	printf \\33\[\?1047l
    	tput rc
    	printf "${green}\nSuccesfully Cleared Personality\n"
    	rm /home/$user/.config/glados/settings-p.txt
    	stty echo
    	exit
  	elif [ "$C" = 3 ]; then
    	clr 5
    	main
  	else
    	printf "${red}Invalid Input! Press Enter To Try Again" && read && printf "\033[2K" && clr 5
    	personality
  	fi
	}

	function personality_2() {
  	printf "${blue}Set Personality:  What Personality Do You Want? (If You Want Two Or More Use Option 6)\n${yellow}1) Sarcastic\n2) Funny\n3) Comedic\n4) Rude\n5) Custom\n6) Cancel/Back\n" && printf "${normal}Option: " && stty echo && read C && stty -echo
  	if [ "$C" = 1 ]; then
    	P="sarcastic"
  	elif [ "$C" = 2 ]; then
    	P="funny"
  	elif [ "$C" = 3 ]; then
    	P="comedic"
  	elif [ "$C" = 4 ]; then
    	P="rude"
  	elif [ "$C" = 5 ]; then
    	clr 8 && printf "${blue}Write The Personalites You Want (EX: 'sweet, really funny and a bit sarcastic'):\n" && stty echo && read -e -p "${green}> ${normal}" P && stty -echo
  	elif [ "$C" = 6 ]; then
    	clr 8
    	personality
  	else
    	printf "${red}Invalid Input! Press Enter To Try Again" && read && printf "\033[2K" && clr 8
    	personality_2
  	fi

		printf '%s' "$P" > /home/$user/.config/glados/settings-p.txt

  	if [ ! "$C" = 5 ]; then
    	printf \\33\[\?1047l
    	tput rc
    	printf "\n${green}Successfully Set Personality!\n$N"
			printf "${normal}"
			stty echo
			exit
  	else
    	printf \\33\[\?1047l
    	tput rc
    	printf "\n${green}Successfully Set Personality!\n$N"
    	printf "${normal}"
			stty echo
			exit
  	fi
	}

	tput sc
	printf \\33\[\?1047h
	clear
	main
fi
#-----------------------RESET FUNCNCTION-----------------------
if [ "$OP_R" = true ]; then
	reset
	if [ -z "$OP_C" ] && [ -z "$T" ]; then
		stty echo
		exit
	fi
	sleep 2
fi

#-----------------------NETWORK CHECK-----------------------
if ! ping -q -c1 google.com &>/dev/null; then
		printf "\n${red}You don't have internet connection! Please reconnect and try again\n$N"
		stty echo
		exit
fi

#-----------------------UPDATER-----------------------
if [ "$OP_U" = true ]; then
	stty -echo
	printf "\n"

	#Check Install Location
	install_location=$(which glados | sed 's/\/glados//')
	if [ "$install_location" = /usr/local/bin ]; then
		install_type="Global"
	else
		install_type="Local"
	fi

	if [ "$install_type" = "Global" ] && [ "$sudo" = "false" ]; then
		printf "${red}This Function Must Be Run As SUDO (Because The Program Is Installed Globally)\n$N" 
		stty echo
		exit
	fi

	#Cleanup funcions
	function cleanup_sig {
		stty echo
		printf "\n${magneta}----------------------------------\n\n${blue}User Ordered SIGINT. ${yellow}Cleaning Up...\n"
		exit
	}
	
	function cleanup_fail {
		stty echo
		printf "\n${magneta}----------------------------------\n\n${red}Installation Failed! ${yellow}Cleaning Up...\n"
		exit
	}
	
	#Give Installation Type Chance
	printf "${blue}Current Installation Type Is: $install_type\n"
	if [ "$sudo" = true ]; then
		stty echo
		printf "${normal}Do You Want To Change It? [y/N]: " && read C && C=$(echo "$C" | tr '[:upper:]' '[:lower:]') && printf "\033[1A\033[2K"
		stty -echo
		if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
			if [ "$install_type" = Global ]; then
				install_location=$HOME/.local/bin
				printf "\033[1A\033[2K${blue}New Installation Type Is: Local\n"
			else
				install_location=/usr/local/bin
				printf "\033[1A\033[2K${blue}New Installation Type Is: Global\n"
			fi
		fi
	fi
	printf "${magneta}----------------------------------\n\n"

	#Remove Old Version
	if [[ -e "$install_location/gpt-glados" ]]; then
  		rm "$install_location/gpt-glados" 2>/dev/null
	fi

	#Prepare & Download
	trap cleanup_sig SIGINT
	printf "${yellow}Getting Latest Release Of GLaDOS-GPT...\n"
	if tput setaf 4 && curl -SL --progress-bar "https://github.com/StellarSt0rm/GLaDOS/releases/latest/download/gpt-glados" -o $install_location/gpt-glados && sleep 2; then
		printf "\033[1A\033[2K\033[1A\033[2K\r${green}Successfully Got Lastest Release Of GLaDOS-GPT!\n"
	else
		printf "\033[1A\033[2K\033[1A\033[2K\r${red}Failed To Get Lastest Release Of GLaDOS-GPT!\n"
		cleanup_fail
	fi
	printf "${yellow}Getting Lastest Release Of GLaDOS...\n"
	if tput setaf 4 && curl -SL --progress-bar "https://github.com/StellarSt0rm/GLaDOS/releases/latest/download/glados" -o $install_location/glados && sleep 2; then
		printf "\033[1A\033[2K\033[1A\033[2K\r${green}Successfully Got Lastest Release Of GLaDOS!\n"
	else
		printf "\033[1A\033[2K\033[1A\033[2K\r${red}Failed To Get Lastest Release Of GLaDOS!\n"
		cleanup_fail
	fi
	printf "${magneta}----------------------------------\n\n"

	#Delete Old Swap Files
	if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
		if [ "$install_type" = Global ]; then
			rm /usr/local/bin/glados 2>/dev/null
			rm /usr/local/bin/gpt-glados 2>/dev/null
			sudo chown $user $HOME/.local/bin/glados && sudo chown $user $HOME/.local/bin/gpt-glados 2>/dev/null
			ln -s $HOME/.local/bin/glados /usr/local/sbin 2>/dev/null
			ln -s $HOME/.local/bin/gpt-glados /usr/local/sbin 2>/dev/null
		else
			rm $HOME/.local/bin/glados 2>/dev/null
			rm $HOME/.local/bin/gpt-glados 2>/dev/null
			rm /usr/local/sbin/glados 2>/dev/null
			rm /usr/local/sbin/gpt-glados 2>/dev/null
		fi
	fi

	chmod +x $install_location/glados && chmod +x $install_location/gpt-glados 2>/dev/null

	#Clean Up
	printf "${green}Installation Succeded!\n"
	printf "${blue}\nExiting...\n$N"
	stty echo
	export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$HOME/.local/bin"
	exit
fi

#-----------------------UNINSTALLER-----------------------
if [ "OP_UN" = true ]; then
	install_location=$(which glados | sed 's/\/glados//')
	printf "\nWork In Progress (So, No TUI)\n"
	if [ "$install_location" = "/usr/local/bin" ]; then
		if [ "$sudo" = true ]; then
			rm $install_location/glados $install_location/gpt-glados
			stty echo
		else
			printf "\nSudo Is Needed To Uninstall GLaDOS Globall Mode\n"
		fi
	else
		rm $install_location/glados $install_location/gpt-glados
		stty echo
	fi
	exit
fi

#-----------------------SHELL COMMANDS-----------------------
if [ "$OP_S" = true ]; then
	gpt-glados -s "$T"
	stty echo
	exit
fi

#-----------------------CODE-----------------------
if [ "$OP_O" = true ]; then
	gpt-glados -c "$T"
	stty echo
	exit
fi

#-----------------------CHAT MODE FUNCTION-----------------------
if [ "$OP_C" = true ]; then
	stty -echo
	tput sc
	printf \\33\[\?1047h
	clear
	printf "${green}Welcome to GLaDOS chat mode! Type \"-h\" to know the commands${normal}\n\n"
	if [ "$OP_N" = true ] && { [ "$OP_R" = true ] || [ ! -f ~/.config/tgpt/config.txt ]; }; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt-glados "My name is $USER,$PERSONALITY $T"
		else
			printf "\n"
			gpt-glados "My name is $USER,$PERSONALITY hi"
		fi
	elif [ -f ~/.config/tgpt/config.txt ]; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt-glados "$T"
		fi
	elif [ ! -f ~/.config/tgpt/config.txt ]; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt-glados "Your name is now GLaDOS and mine is $USER,$PERSONALITY $T"
		else
			printf "\n"
			gpt-glados "Your name is now GLaDOS and mine is $USER,$PERSONALITY hi"
		fi
	fi
fi

#-----------------------CLASSIC MODE FUNCTION-----------------------
if [ -n "$T" ] && [ -z "$OP_C" ]; then
	if [ "$OP_N" = true ] && { [ "$OP_R" = true ] || [ ! -f ~/.config/tgpt/config.txt ]; }; then
		gpt-glados "My name is $USER,$PERSONALITY $T" && printf "\033[1A$N"
	elif [ -f ~/.config/tgpt/config.txt ]; then
		gpt-glados "$T" && printf "\033[1A$N"
	elif [ ! -f ~/.config/tgpt/config.txt ]; then
		gpt-glados "Your name is now GLaDOS and mine is $USER,$PERSONALITY $T" && printf "\033[1A$N"
	fi
fi

#-----------------------CHAT MODE LOOP-----------------------
trap cleanup_2 SIGINT
while [ "$OP_C" = true ]; do
	stty echo
	printf "\e[0;1m>>\e[0m${blue}" && read -e -p " " q && history -s $p && tput sgr0
	stty -echo
	printf "\n"
	if [ "$q" = "-q" ]; then
		stty echo
		printf \\33\[\?1047l
		tput rc
		exit
	elif [ "$q" = "-h" ]; then
		cols=$(tput cols)
		printf "\n"
		for ((i=0; i<$cols; i++)); do printf "${magneta}-${normal}"; done && printf "\n"
		printf "$h\n\n"
		for ((i=0; i<$cols; i++)); do printf "${magneta}-${normal}"; done && printf "\n\n"
	elif [[ "$q" == -* ]]; then
		printf "${red}Command Not Found!\n${blue}Use '-h' to get more help\n"
	else
		trap - SIGINT
		gpt-glados "$q"
		trap cleanup_2 SIGINT
	fi
done
stty echo
history -r
#HI, HOWYA DOING, LOOKING MY CODE, HUH? DON'T WORRY, U CAN COPY! IDC, HALF OF THE CODE ISN'T MINE LOL
